/**
 * 
 */
package com.cmsz.ck.runnable;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SendMessageServer implements Runnable {
	private ServerSocket server;
	private List<MessageSocket> mlist = new ArrayList<MessageSocket>();
	private Map<MessageSocket, DataOutputStream> socketMap = new HashMap<MessageSocket, DataOutputStream>();
	private Thread thread = new Thread(new Runnable() {
		@Override
		public void run() {
			testAlive();
		}
	});
	public SendMessageServer() {
		try {
			server = new ServerSocket(1234);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	@Override
	public void run() {
		boolean flag = true;
		thread.start();
		try {
			while(flag){					
				Socket socket = server.accept();
				System.out.println("用户"+socket.getInetAddress()+"上线了");
				MessageSocket m = new MessageSocket(socket);
				Thread t = new Thread(m);
				t.start();
				mlist.add(m);
				socketMap.put(m,new DataOutputStream(socket.getOutputStream()));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
			close();
		}
	}
	private void testAlive(){
		boolean flag = true;
		DataOutputStream dot=null;
		loop:
		while(flag){
			if(!mlist.isEmpty()){
				for(MessageSocket mSocket:mlist){
					dot = socketMap.get(mSocket);
					try {
						dot.writeUTF("##");
					} catch (IOException e) {
						e.printStackTrace();
						socketMap.remove(mSocket);
						mlist.remove(mSocket);
						mSocket.close();
						continue loop;
					}
				}
			}
			try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	public void close(){
		try {
			mlist=null;
			socketMap=null;
			if(server!=null)
			server.close();
			System.out.println("销毁了service");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
