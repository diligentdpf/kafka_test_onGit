/**
 * 
 */
package com.cmsz.ck.runnable;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.Socket;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;


import kafka.consumer.Consumer;
import kafka.consumer.ConsumerConfig;
import kafka.consumer.ConsumerIterator;
import kafka.consumer.KafkaStream;
import kafka.javaapi.consumer.ConsumerConnector;

/**
 * @author oysj
 *
 */
public class MessageSocket implements Runnable {
	private Socket socket;
	private DataOutputStream out;
	private InetAddress addr;
	private ConsumerConnector consumer;
	private String topic ="abc";
	public DataOutputStream getOut() {
		return out;
	}
	public MessageSocket(Socket socket) {
		this.socket = socket;
		addr = socket.getInetAddress();
		consumer  = Consumer.createJavaConsumerConnector(createConsumerConfig());
		System.out.println(this.toString());
	}
	@Override
	public void run() {
		try {
			out = new DataOutputStream(this.socket.getOutputStream());
			Map<String, Integer> topicCountMap = new HashMap<String, Integer>();
			topicCountMap.put(topic, new Integer(1));
			Map<String, List<KafkaStream<byte[], byte[]>>> consumerMap = consumer.createMessageStreams(topicCountMap);
			KafkaStream<byte[], byte[]> stream = consumerMap.get(topic).get(0);
			ConsumerIterator<byte[], byte[]> it = stream.iterator();
			loop:
				while(it.hasNext()){
					String str = new String(it.next().message());
					System.out.println("正在将"+str +"发送给用户"+socket.getInetAddress());
					out.writeUTF(str);
					out.flush();
				}
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
			close();
		}
	}
	private static ConsumerConfig createConsumerConfig(){
		Properties props = new Properties();
		props.put("zookeeper.connect", "192.168.1.199:2181");
		props.put("group.id", "group2");
		props.put("zookeeper.session.timeout.ms", "40000");
		props.put("zookeeper.sync.time.ms", "200");
		props.put("auto.commit.interval.ms", "500");
		return new ConsumerConfig(props);
	}
	public void close(){
		if(consumer!=null)
			consumer.shutdown();
			if(addr!=null)
			addr=null;
			try {
				if(out!=null){
					out.flush();
					out.close();
				}
				if(socket!=null)
				socket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		System.gc();
	}
}
